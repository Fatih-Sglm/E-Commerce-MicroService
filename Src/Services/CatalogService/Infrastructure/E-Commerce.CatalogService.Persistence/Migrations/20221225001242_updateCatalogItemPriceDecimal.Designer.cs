// <auto-generated />
using System;
using E_Commerce.CatalogService.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.CatalogService.Persistence.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20221225001242_updateCatalogItemPriceDecimal")]
    partial class updateCatalogItemPriceDecimal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("catalog")
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatalogItemCatalogItemVariant", b =>
                {
                    b.Property<long>("CatalogItemVariantsId")
                        .HasColumnType("bigint");

                    b.Property<long>("CatalogItemsId")
                        .HasColumnType("bigint");

                    b.HasKey("CatalogItemVariantsId", "CatalogItemsId");

                    b.HasIndex("CatalogItemsId");

                    b.ToTable("CatalogItemsVariants", "catalog");
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entities.CatalogBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Catalog_Brand", "catalog");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 12, 25, 3, 12, 42, 475, DateTimeKind.Local).AddTicks(4737),
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 12, 25, 3, 12, 42, 475, DateTimeKind.Local).AddTicks(4753),
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 12, 25, 3, 12, 42, 475, DateTimeKind.Local).AddTicks(4755),
                            Name = "Puma"
                        });
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entities.CatalogItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CatalogBrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("CatalogTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CatalogBrandId");

                    b.HasIndex("CatalogTypeId");

                    b.ToTable("Catalog_Item", "catalog");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CatalogBrandId = 1L,
                            CatalogTypeId = 1L,
                            CreatedDate = new DateTime(2022, 12, 25, 3, 12, 42, 476, DateTimeKind.Local).AddTicks(3026),
                            Description = "Nike'ın günlük giyim için tasarlanmış ilk Air Max modeli olan Nike Air Max 270, dikkat çeken stili rahatlıkla buluşturuyor. Air Max ikonlarından ilham alan tasarım, büyük penceresi ve yeni renkleriyle Nike'ın en büyük yeniliğini sergiliyor.",
                            Name = "Nike Air Max 270",
                            Price = 1499.99m
                        },
                        new
                        {
                            Id = 2L,
                            CatalogBrandId = 1L,
                            CatalogTypeId = 2L,
                            CreatedDate = new DateTime(2022, 12, 25, 3, 12, 42, 476, DateTimeKind.Local).AddTicks(3034),
                            Description = "Her takımın onu ligdeki diğer takımlardan ayıran gerçek renkleri ve eşsiz bir kimliği bulunur. Zengin basketbol mirasını onurlandıran bu Golden State Warriors Forma, takım ayrıntılarından ter tutmayan hafif fileye kadar profesyonellerin sahada giydiği formalardan ilham alır. Favori oyuncunu ve sevdiğin oyunu temsil ederken hem sahada hem de saha dışında kuru ve serin kalmana yardımcı olur",
                            Name = "Golden State Warriors Icon Edition 2022/23",
                            Price = 1849.90m
                        });
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entities.CatalogItemImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CatalogItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHeader")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CatalogItemId");

                    b.ToTable("Catalog_Item_Image", "catalog");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CatalogItemId = 1L,
                            CreatedDate = new DateTime(2022, 12, 25, 3, 12, 42, 476, DateTimeKind.Local).AddTicks(5686),
                            FileName = "Airmax270.png",
                            IsHeader = false,
                            Path = "Product//Shoes//Airmax270.png"
                        },
                        new
                        {
                            Id = 2L,
                            CatalogItemId = 2L,
                            CreatedDate = new DateTime(2022, 12, 25, 3, 12, 42, 476, DateTimeKind.Local).AddTicks(5691),
                            FileName = "GoldenState2022/23_uniform.png",
                            IsHeader = false,
                            Path = "Product//T-Shirt//GoldenState2022/23_uniform.png"
                        });
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entities.CatalogItemVariant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VariantDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CatalogItemVariant", "catalog");
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entities.CatalogType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Catalog_Type", "catalog");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 12, 25, 3, 12, 42, 477, DateTimeKind.Local).AddTicks(4987),
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 12, 25, 3, 12, 42, 477, DateTimeKind.Local).AddTicks(5001),
                            Name = "T-Shirt"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 12, 25, 3, 12, 42, 477, DateTimeKind.Local).AddTicks(5002),
                            Name = "tracksuit"
                        });
                });

            modelBuilder.Entity("CatalogItemCatalogItemVariant", b =>
                {
                    b.HasOne("E_Commerce.CatalogService.Domain.Entities.CatalogItemVariant", null)
                        .WithMany()
                        .HasForeignKey("CatalogItemVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.CatalogService.Domain.Entities.CatalogItem", null)
                        .WithMany()
                        .HasForeignKey("CatalogItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entities.CatalogItem", b =>
                {
                    b.HasOne("E_Commerce.CatalogService.Domain.Entities.CatalogBrand", "CatalogBrand")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.CatalogService.Domain.Entities.CatalogType", "CatalogType")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogBrand");

                    b.Navigation("CatalogType");
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entities.CatalogItemImage", b =>
                {
                    b.HasOne("E_Commerce.CatalogService.Domain.Entities.CatalogItem", "CatalogItem")
                        .WithMany("CatalogItemImages")
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogItem");
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entities.CatalogBrand", b =>
                {
                    b.Navigation("CatalogItems");
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entities.CatalogItem", b =>
                {
                    b.Navigation("CatalogItemImages");
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entities.CatalogType", b =>
                {
                    b.Navigation("CatalogItems");
                });
#pragma warning restore 612, 618
        }
    }
}
