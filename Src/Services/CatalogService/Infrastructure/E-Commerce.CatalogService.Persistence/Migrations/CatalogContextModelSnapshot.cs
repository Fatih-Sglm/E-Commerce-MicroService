// <auto-generated />
using System;
using E_Commerce.CatalogService.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.CatalogService.Persistence.Migrations
{
    [DbContext(typeof(CatalogContext))]
    partial class CatalogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("catalog")
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entity.CatalogBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Catalog_Brand", "catalog");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Brand = "Nike",
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 627, DateTimeKind.Local).AddTicks(7574)
                        },
                        new
                        {
                            Id = 2L,
                            Brand = "Adidas",
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 627, DateTimeKind.Local).AddTicks(7591)
                        },
                        new
                        {
                            Id = 3L,
                            Brand = "Puma",
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 627, DateTimeKind.Local).AddTicks(7592)
                        });
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entity.CatalogItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CatalogBrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("CatalogTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CatalogBrandId");

                    b.HasIndex("CatalogTypeId");

                    b.ToTable("Catalog_Item", "catalog");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CatalogBrandId = 1L,
                            CatalogTypeId = 1L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 630, DateTimeKind.Local).AddTicks(6445),
                            Description = "Nike'ın günlük giyim için tasarlanmış ilk Air Max modeli olan Nike Air Max 270, dikkat çeken stili rahatlıkla buluşturuyor. Air Max ikonlarından ilham alan tasarım, büyük penceresi ve yeni renkleriyle Nike'ın en büyük yeniliğini sergiliyor.",
                            Name = "Nike Air Max 270",
                            Price = 1499.99m
                        },
                        new
                        {
                            Id = 2L,
                            CatalogBrandId = 1L,
                            CatalogTypeId = 2L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 630, DateTimeKind.Local).AddTicks(6458),
                            Description = "Her takımın onu ligdeki diğer takımlardan ayıran gerçek renkleri ve eşsiz bir kimliği bulunur. Zengin basketbol mirasını onurlandıran bu Golden State Warriors Forma, takım ayrıntılarından ter tutmayan hafif fileye kadar profesyonellerin sahada giydiği formalardan ilham alır. Favori oyuncunu ve sevdiğin oyunu temsil ederken hem sahada hem de saha dışında kuru ve serin kalmana yardımcı olur",
                            Name = "Golden State Warriors Icon Edition 2022/23",
                            Price = 1849.90m
                        },
                        new
                        {
                            Id = 3L,
                            CatalogBrandId = 1L,
                            CatalogTypeId = 2L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 630, DateTimeKind.Local).AddTicks(6460),
                            Description = "Önden mütevazi. Arkadan nefes kesici. Bu adidas tişört, bir süper kahraman gibi sürprizlerle dolu. Marvel'in Kara Panter karakterinden ilham alan bu tişört, kalın pamuklu kumaştan üretilmiştir. Gardırobundaki her parça ile mükemmel biçimde eşleşen model, serin havalarda hem sıcak kalmanı hem şık görünmeni sağlar.\r\n\r\nPamuklu ürünlerimiz, sürdürülebilir pamuk çiftçiliğini destekler.",
                            Name = "BLACK PANTHER GRAPHİC TİŞÖRT",
                            Price = 1499.99m
                        });
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entity.CatalogItemFeature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AvailableStock")
                        .HasColumnType("bigint");

                    b.Property<int?>("BodySize")
                        .HasColumnType("int");

                    b.Property<long>("CatalogItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genders")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CatalogItemId")
                        .IsUnique();

                    b.ToTable("Catalog_Item_Feature", "catalog");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailableStock = 100L,
                            CatalogItemId = 1L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 631, DateTimeKind.Local).AddTicks(6878),
                            Genders = 2,
                            Size = "43"
                        },
                        new
                        {
                            Id = 2L,
                            AvailableStock = 100L,
                            BodySize = 1,
                            CatalogItemId = 2L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 631, DateTimeKind.Local).AddTicks(6887),
                            Genders = 0
                        },
                        new
                        {
                            Id = 3L,
                            AvailableStock = 50L,
                            BodySize = 2,
                            CatalogItemId = 3L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 631, DateTimeKind.Local).AddTicks(6890),
                            Genders = 2
                        });
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entity.CatalogItemImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CatalogItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHeader")
                        .HasColumnType("bit");

                    b.Property<string>("PictureFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CatalogItemId");

                    b.ToTable("Catalog_Item_Image", "catalog");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CatalogItemId = 1L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 632, DateTimeKind.Local).AddTicks(2413),
                            IsHeader = false,
                            PictureFileName = "Airmax270.png"
                        },
                        new
                        {
                            Id = 2L,
                            CatalogItemId = 2L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 632, DateTimeKind.Local).AddTicks(2422),
                            IsHeader = false,
                            PictureFileName = "GoldenState2022/23_uniform.png"
                        },
                        new
                        {
                            Id = 3L,
                            CatalogItemId = 3L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 632, DateTimeKind.Local).AddTicks(2423),
                            IsHeader = false,
                            PictureFileName = "black_panther_Tshirt.png"
                        });
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entity.CatalogType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Catalog_Type", "catalog");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 632, DateTimeKind.Local).AddTicks(8497),
                            Type = "Shoes"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 632, DateTimeKind.Local).AddTicks(8504),
                            Type = "T-Shirt"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 11, 10, 16, 48, 44, 632, DateTimeKind.Local).AddTicks(8505),
                            Type = "tracksuit"
                        });
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entity.CatalogItem", b =>
                {
                    b.HasOne("E_Commerce.CatalogService.Domain.Entity.CatalogBrand", "CatalogBrand")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.CatalogService.Domain.Entity.CatalogType", "CatalogType")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogBrand");

                    b.Navigation("CatalogType");
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entity.CatalogItemFeature", b =>
                {
                    b.HasOne("E_Commerce.CatalogService.Domain.Entity.CatalogItem", "CatalogItem")
                        .WithOne("CatalogItemFeature")
                        .HasForeignKey("E_Commerce.CatalogService.Domain.Entity.CatalogItemFeature", "CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogItem");
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entity.CatalogItemImage", b =>
                {
                    b.HasOne("E_Commerce.CatalogService.Domain.Entity.CatalogItem", "CatalogItem")
                        .WithMany("CatalogItemImages")
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogItem");
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entity.CatalogBrand", b =>
                {
                    b.Navigation("CatalogItems");
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entity.CatalogItem", b =>
                {
                    b.Navigation("CatalogItemFeature")
                        .IsRequired();

                    b.Navigation("CatalogItemImages");
                });

            modelBuilder.Entity("E_Commerce.CatalogService.Domain.Entity.CatalogType", b =>
                {
                    b.Navigation("CatalogItems");
                });
#pragma warning restore 612, 618
        }
    }
}
